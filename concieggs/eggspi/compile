#!/bin/sh

set -e # Die on error

if [ $# -lt 1 ]; then
    echo "Usage: $0 [--do-not-run] <srcfile> [args...]"
    exit 1
fi

basename=${1##*/}
if [ "$basename" == '--do-not-run' ]; then
    do_run=0
    shift
    basename=${1##*/}
else
    do_run=1
fi
srcfile=$(find $CONCIEGGS_DIR/compiled -maxdepth 1 -name "$basename.*")

if ! [ "$srcfile" ]; then
    echo "$0: cannot find source for program '$basename'" >&2
    exit 3
fi

shift

compiledfile=$CONCIEGGS_DB_DIR/compiled-cache/$basename

if [ -L "$srcfile" ]; then
    srcfile="$(readlink -f $srcfile)"
fi

if [[ -f "$srcfile" && "$compiledfile" -nt "$srcfile" ]] || [[ -d "$srcfile" && "$compiledfile" -nt "$(ls -ct1 $(find "$srcfile" -type f) | head -n 1)" ]]; then
    if [ "$do_run" = 1 ]; then
        "$compiledfile" "$@"
    fi
else
    case $srcfile in
        *go)
            compile() {
                export GO111MODULE=off
                export GOPATH=$CONCIEGGS_DIR/compiled:$CONCIEGGS_LIB_DIR/golangbiblioteggs
                go build $1 >&2
            }
            ;;
        *c)
            compile() {
                cc -std=c99 -I "$CONCIEGGS_DIR/eggspi" -lm $1 -o $2
            }
            ;;
        *cob)
            compile() {
                cobc -x -o $2 $1
            }
            ;;
        *sml)
            compile() {
                mosmlc -P full -toplevel -o $2 $1
            }
            ;;
        *dune)
            compile() {
                cd "$1"
                dune build "$basename.exe"
                cp "_build/default/$basename.exe" $2
                chmod u+w $2
            }
            ;;
        *pas)
            compile() {
                cd $(dirname $1)
                fpc $(basename $1) >&2
                cp ${1%.pas} $2
            }
            ;;
        *cabal)
            compile() {
                cd "$1"
                cabal build
                cp "$(find dist-newstyle/ -type f -name $basename)" "$2"
            }
            ;;
        *hs)
            compile() {
                ghc "$1" -o "$2" -i"$CONCIEGGS_DIR/compiled:$CONCIEGGS_LIB_DIR/haskeggs" >&2
            }
            ;;
        *kex)
            compile() {
                kexc compile "$1" --srcout "$1.c" >&2
                cc -o "$2" -O3 -xc -D FLAG_WORDALIGNED -w "$1.c" >&2
            }
            ;;
        *alg)
            compile() {
                marst "$1" -o "$1.c"
                cc -o "$2" -O3 -lalgol -I/usr/local/include -L/usr/local/lib "$1.c" >&2
            }
            ;;
        *make)
            compile() {
                cd "$1"
                make > /dev/stderr
                cp "$basename" "$2"
            }
            ;;
        *zig)
            compile() {
                zig build-exe $1
            }
            ;;
        *java)
            compile() {
                javac $1 -d "$CONCIEGGS_DB_DIR/compiled-cache"
                CRAP=$(echo $2 | awk -F. '{print $1}')
                TIS=$(basename $CRAP)
                KLASSE=$(echo $TIS | cut -c1-1 | tr '[a-z]' '[A-Z]')$(echo $TIS | cut -c 2-)
                echo '#!/bin/sh\njava '$KLASSE' $@' > $CRAP
                chmod +x $CRAP
            }
            ;;
        *rust)
            compile() {
                cd "$1"
                cargo build --release
                cp target/release/programmeringssprog "$2"
            }
            ;;
        *nim)
            compile() {
                nim -o:"$2" compile "$1"
            }
            ;;
        *fs)
            compile() {
                fsharpc --out:"$2.exe" "$1" > /dev/null
                cat > "$2" <<EOF
#!/bin/sh

exec mono "$2.exe" "$@"
EOF
                chmod +x "$2"
            }
            ;;
        *cpp)
            compile() {
                clang++ -std=c++11 -lm $1 -o $2
            }
            ;;
        *fut)
            compile() {
                futhark c $1 -o $2
            }
            ;;
        *f90)
            compile() {
                f90 "$1" -o "$2"
            };;
        *)
            echo "Cannot compile file $srcfile - unknown extension."
            exit 2
    esac

    compiledir="$(mktemp -d /tmp/compileXXXXXX)"
    cp -r "$srcfile" "$compiledir"
    srcfile="$compiledir/$(basename "$srcfile")"

    mkdir -p "$CONCIEGGS_DB_DIR/compiled-cache"
    if (cd "$CONCIEGGS_DB_DIR/compiled-cache";
        compile "$srcfile" "$compiledfile"); then
        rm -rf "$compiledir"
        if [ "$do_run" = 1 ]; then
            "$compiledfile" "$@" || true # Midlertidigt fiks for ghc
                                         # runtime-problemer pÃ¥ OpenBSD.
        fi
    else
        rm -rf "$compiledir"
        exit 1
    fi
fi
