#!/usr/bin/env rust-script
//! Brug: navnestatistik <fornavn> <efternavn>
//!
//! ```cargo
//! [dependencies]
//! rand = "0.8.5"
//! reqwest = { version = "0.12", features = ["blocking"] }
//! scraper = "0.21.0"
//! tokio = { version = "1", features = ["full"] }
//! ```
//!
//! For debugging HTML output:
//!
//! ```
//! curl 'https://www.dst.dk/da/DstDk-Global/Udvikler/HostHvorMangeHedder?ajax=1&firstName=jens&lastName=hansen'
//! ```
//!
//! On success, the result appears to contain at least the following chunk of HTML:
//!
//! ```
//! <tbody>
//! <tr><td>Mænd med fornavnet 'JENS'</td><td class="text-right">42123</td></tr><tr><td>Mænd og kvinder med efternavnet 'HANSEN'</td><td class="text-right">191794</td></tr><tr><td>Mænd med navnet 'JENS HANSEN'</td><td class="text-right">1543</td></tr>
//! </tbody>
//! ```
//!
//! On failure, the result appears to contain at least the following chunk of HTML:
//!
//! ```
//! <tbody>
//! <tr><td>Der er ingen med fornavnet 'FLOMMIDUR'</td><td></td></tr><tr><td>Der er ingen personer med efternavnet 'BILBOVITSH'</td><td></td></div><tr><td>Der er færre end 3 personer med navnet 'FLOMMIDUR BILBOVITSH'</td><td></td></tr>
//! </tbody>
//! ```

use rand::Rng as _;
use rand::prelude::SliceRandom as _;

const BASE_URL: &str = "https://www.dst.dk/da/DstDk-Global/Udvikler/HostHvorMangeHedder";

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = std::env::args().collect();

    if args.len() != 3 {
        eprintln!("Brug: navnestatistik <fornavn> <efternavn>");
        std::process::exit(1);
    }

    let firstname = &args[1];
    let lastname = &args[2];
    let url = format!(
        "{}?ajax=1&firstName={}&lastName={}",
        BASE_URL,
        firstname,
        lastname,
    );

    println!("curl {}", url);

    let client = reqwest::blocking::Client::new();
    let response = client.get(&url).send()?;
    let body = response.text()?;

    let document = scraper::Html::parse_document(&body);
    let selector = scraper::Selector::parse("tbody > tr > td").unwrap();
    let mut selection = document.select(&selector);
    let mut strings = Vec::with_capacity(7);
    let mut numbers = Vec::with_capacity(3);

    while let Some(statistic) = selection.next() {
        strings.push(statistic.text().collect::<String>());
        let Some(number_str) = selection.next() else { break };
        numbers.push(number_str.text().collect::<String>().parse::<i64>().unwrap_or(0));
    }

    let nonzero = numbers.iter().any(|n| *n > 0);

    let mut results = vec![];
    for (s, n) in strings.into_iter().zip(numbers.into_iter()) {
        if n > 0 {
            results.push(format!("{}: {}", s, n));
        } else {
            results.push(s);
        }
    }

    if nonzero {
        results.push(success_message());
    } else {
        results.push(failure_message());
    }

    println!("{}", results.join(". "));

    Ok(())
}

fn success_message() -> String {
    [
        "Moderne!",
        "Eksotisk!",
        "En klassiker.",
        "Et hit i børnehaven!",
        "Ja, det kan man så også hedde.",
        "Det kunne dit næste barn hedde.",
        "Så er man heller ikke i tvivl om kønnet.",
    ].choose(&mut rand::thread_rng()).unwrap().to_string()
}

fn failure_message() -> String {
    let num = rand::thread_rng().gen_range(0..=1000);
    [
        "Kan høn hedde det?".to_string(),
        "Så postmoderne er vi endnu ikke blevet.".to_string(),
        "Det skal nok ikke siges højt i børnehavne.".to_string(),
        "Det var der vist ikke nogen som hed.".to_string(),
        "Det bliver sikkert populært før eller siden...".to_string(),
        "Jeg... Jeg tror ikke det er et navn.".to_string(),
        "Det navn bliver vist aldrig godkendt!".to_string(),
        format!("Der var {} med nav... ej, der var ikke nogen.", num),
    ].choose(&mut rand::thread_rng()).unwrap().to_owned()
}
