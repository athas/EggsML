#!/usr/bin/env perl
#
# Hvor mange hedder [--json] <fornavn> [efternavn]? (Fornavn kan være tomt, efternavn kan være tomt/manglende.)

use 5.012;
use strict;
use warnings;
no warnings 'once';

use EggsML::EggsPI text => [qw(curl)];
use HTML::Query qw(Query);
use JSON;
use URI::Escape;
use List::Util qw(max);

my $use_json = 0;
if (@ARGV && $ARGV[0] eq '--json') {
    $use_json = 1;
    shift @ARGV;
}

unless (@ARGV) {
    print $use_json ? dst_json(0, []) : "ingen resultater";
    exit(-1);
}

our $dst = 'https://www.dst.dk/da/DstDk-Global/Udvikler/HostHvorMangeHedder?ajax=1';
our @comments = (
    "Et hit i børnehaven!",
    "Det kunne dit næste barn hedde.",
    "En klassiker.",
    "Eksotisk!",
    "Ja, det kan man så også hedde.",
);

my ($head, $result) = dst_result(dst_html(@ARGV));
print $use_json ? dst_json(1, $head, $result)
                : dst_text(1, $head, $result);

sub dst_html {
    my $firstName = shift;
    my $lastName = shift // '';
    my $queryString = sprintf('firstName=%s&lastName=%s',
        uri_escape($firstName), uri_escape($lastName));
    my $html = curl('-s', $dst, '--data', $queryString);
    my $tree = Query(text => $html);
    return $tree;
}

sub dst_result {
    my $tree = shift;
    my @head = map { $_->as_trimmed_text } $tree->query('thead > tr > th')->get_elements;
    my @result;
    for my $row ($tree->query('tbody > tr')->get_elements) {
        my @row = map { $_->as_trimmed_text } Query(tree => $row)->query('td')->get_elements;
        my $title = $row[0];
        if ($title =~ m/^Der er ingen /) {
            $title =~ s/^Der er ingen //;
            push @result, {
                title    => $title,
                $head[1] => 0,
                $head[2] => 0,
                $head[3] => 0,
            };
        } elsif ($title =~ m/^Der er to eller færre /) {
            $title =~ s/^Der er to eller færre //;
            push @result, {
                title    => $title,
                $head[1] => "0-2",
                $head[2] => "0-2",
                $head[3] => "0",
            };
        } else {
            push @result, {
                title    => $row[0],
                $head[1] => $row[1],
                $head[2] => $row[2],
                $head[3] => $row[3],
            };
        }
    }
    return \@head, \@result;
}

sub dst_json {
    my $status = shift;
    my $head = shift;
    my $result = shift;
    return to_json({ status => $status, result => $result}, { pretty => 1 });
}

sub dst_text {
    my $status = shift;
    my $head = shift;
    my $result = shift;

    my @years = grep { /^\d+$/ } @$head;
    my $year = max @years;

    my @nonzero = grep { grep { /^(\d+)/ && $1 > 0 } values %$_ } @$result;
    my @result = map { dst_text_row($year, $_) } @nonzero;
    if (@result) {
        return "Der var " . (join ", ", @result) . ". " . $comments[rand @comments] . "\n";
    } else {
        my $n = int(rand(1000));
        my @noresult = (
            "Det var der vist ikke nogen som hed.",
            "Det bliver sikkert populært før eller siden...",
            "Jeg... Jeg tror ikke det er et navn.",
            "Det navn er vist ikke blevet godkendt!",
            "Der var $n med nav... ej, der var ikke nogen.",
        );
        return $noresult[rand @noresult];
    }
}

sub dst_text_row {
    my $year = shift;
    my $row = shift;
    my $title = delete $row->{title};
    my $change = $_->{'Ændring'};
    $change = $change
      ? ' (' . (substr($change, 0, 1) eq '-' ? $change : '+' . $change) . ') '
      : ' ';
    return $_->{$year} . $change . lcfirst $title;
}
