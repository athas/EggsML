#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# CONCIEGGS CASINO - ROULETTE
# Et rigtigt roulette spil med flere spillere!

import subprocess
import sys
import os
import json
import random
from datetime import datetime, timedelta

# Roulette wheel numbers with colors
# 0 is green, odds are red, evens are black (except 0)
RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]

def get_user():
    """Get current user from environment."""
    return os.getenv("EGGS_USER", "").strip()

def get_casino_data():
    """Get casino database."""
    try:
        db_dir = os.getenv("CONCIEGGS_DB_DIR", ".")
        with open(f"{db_dir}/store/casino", "r") as f:
            return json.loads(f.read())
    except:
        return {"tokens": {}, "last_claim": {}}

def set_casino_data(data):
    """Save casino database."""
    json_str = json.dumps(data, ensure_ascii=False)
    db_dir = os.getenv("CONCIEGGS_DB_DIR", ".")
    os.makedirs(f"{db_dir}/store", exist_ok=True)
    with open(f"{db_dir}/store/casino", "w") as f:
        f.write(json_str)

def get_roulette_game():
    """Get current roulette game state."""
    try:
        db_dir = os.getenv("CONCIEGGS_DB_DIR", ".")
        with open(f"{db_dir}/store/roulette_game", "r") as f:
            content = f.read().strip()
            if not content:
                return None
            return json.loads(content)
    except:
        return None

def set_roulette_game(game):
    """Save roulette game state."""
    json_str = json.dumps(game, ensure_ascii=False)
    db_dir = os.getenv("CONCIEGGS_DB_DIR", ".")
    os.makedirs(f"{db_dir}/store", exist_ok=True)
    with open(f"{db_dir}/store/roulette_game", "w") as f:
        f.write(json_str)

def clear_roulette_game():
    """Clear roulette game state."""
    db_dir = os.getenv("CONCIEGGS_DB_DIR", ".")
    try:
        with open(f"{db_dir}/store/roulette_game", "w") as f:
            f.write("")
    except:
        pass

def get_tokens(user):
    """Get token balance for user."""
    data = get_casino_data()
    return data.get("tokens", {}).get(user, 0)

def set_tokens(user, amount):
    """Set token balance for user."""
    data = get_casino_data()
    if "tokens" not in data:
        data["tokens"] = {}
    data["tokens"][user] = amount
    set_casino_data(data)

def format_bet(bet_type, value):
    """Format bet for display."""
    if bet_type == "number":
        return f"nummer {value}"
    elif bet_type == "red":
        return "rÃ¸d"
    elif bet_type == "black":
        return "sort"
    elif bet_type == "even":
        return "lige"
    elif bet_type == "odd":
        return "ulige"
    elif bet_type == "1-18":
        return "1-18"
    elif bet_type == "19-36":
        return "19-36"
    return str(bet_type)

def parse_bet(bet_str):
    """Parse bet from string. Returns (bet_type, value) or None."""
    bet_str = bet_str.lower().strip()
    
    # Try to parse as number
    try:
        num = int(bet_str)
        if 0 <= num <= 36:
            return ("number", num)
    except ValueError:
        pass
    
    # Color bets
    if bet_str in ["rÃ¸d", "red", "r"]:
        return ("red", None)
    if bet_str in ["sort", "black", "b", "s"]:
        return ("black", None)
    
    # Even/odd
    if bet_str in ["lige", "even", "l"]:
        return ("even", None)
    if bet_str in ["ulige", "odd", "u"]:
        return ("odd", None)
    
    # Ranges
    if bet_str in ["1-18", "lav", "low"]:
        return ("1-18", None)
    if bet_str in ["19-36", "hÃ¸j", "high"]:
        return ("19-36", None)
    
    return None

def check_win(bet_type, bet_value, winning_number):
    """Check if bet wins and return payout multiplier."""
    if winning_number == 0:
        # Only direct bet on 0 wins
        if bet_type == "number" and bet_value == 0:
            return 36  # 35:1 payout + original bet
        return 0
    
    if bet_type == "number":
        if bet_value == winning_number:
            return 36  # 35:1 payout + original bet
        return 0
    
    if bet_type == "red":
        if winning_number in RED_NUMBERS:
            return 2  # 1:1 payout + original bet
        return 0
    
    if bet_type == "black":
        if winning_number in BLACK_NUMBERS:
            return 2
        return 0
    
    if bet_type == "even":
        if winning_number % 2 == 0:
            return 2
        return 0
    
    if bet_type == "odd":
        if winning_number % 2 == 1:
            return 2
        return 0
    
    if bet_type == "1-18":
        if 1 <= winning_number <= 18:
            return 2
        return 0
    
    if bet_type == "19-36":
        if 19 <= winning_number <= 36:
            return 2
        return 0
    
    return 0

def place_bet():
    """Place a bet on roulette."""
    user = get_user()
    # Handle both "roulette sats ..." and "casino roulette sats ..."
    args = sys.argv[1:]
    if args and args[0] in ["sats", "bet"]:
        args = args[1:]  # Skip the command itself
    else:
        # Invoked as subcommand, skip 'roulette' and command
        args = sys.argv[2:] if len(sys.argv) > 2 else []
    
    if len(args) < 2:
        print("Brug: casino roulette sats <belÃ¸b> <hvad>")
        print("Eksempel: casino roulette sats 10 rÃ¸d")
        print("Eksempel: casino roulette sats 5 17")
        return
    
    try:
        amount = int(args[0])
    except ValueError:
        print("BelÃ¸bet skal vÃ¦re et tal!")
        return
    
    if amount <= 0:
        print("Du skal satse mindst 1 polett!")
        return
    
    tokens = get_tokens(user)
    if tokens < amount:
        print(f"Du har kun {tokens} poletter! Du kan ikke satse {amount}.")
        return
    
    # Parse what to bet on
    bet_target = " ".join(args[1:])
    bet = parse_bet(bet_target)
    
    if not bet:
        print(f"Jeg forstÃ¥r ikke hvad '{bet_target}' betyder.")
        print("Du kan satse pÃ¥: et nummer (0-36), rÃ¸d, sort, lige, ulige, 1-18, eller 19-36")
        return
    
    bet_type, bet_value = bet
    
    # Get or create game
    game = get_roulette_game()
    if not game:
        # Start new game
        game = {
            "bets": {},
            "started": datetime.now().isoformat(),
            "spin_time": (datetime.now() + timedelta(seconds=30)).isoformat()
        }
    
    # Check if game already spun
    if "result" in game:
        print("Rouletten er allerede drejet! Start en ny runde.")
        return
    
    # Add/update bet
    if user not in game["bets"]:
        game["bets"][user] = []
    
    game["bets"][user].append({
        "amount": amount,
        "type": bet_type,
        "value": bet_value
    })
    
    # Deduct tokens
    set_tokens(user, tokens - amount)
    
    set_roulette_game(game)
    
    print(f"ðŸŽ° {user} satser {amount} poletter pÃ¥ {format_bet(bet_type, bet_value)}!")
    print(f"Du har {tokens - amount} poletter tilbage.")
    
    # Check if we should auto-spin
    spin_time = datetime.fromisoformat(game["spin_time"])
    if datetime.now() >= spin_time:
        print("Tiden er udlÃ¸bet! Rouletten drejes...")
        spin_wheel()
    else:
        time_left = (spin_time - datetime.now()).seconds
        print(f"Andre spillere har {time_left} sekunder til at satse!")
        print("Brug 'casino roulette spin' for at dreje nu.")

def spin_wheel():
    """Spin the roulette wheel and determine winners."""
    game = get_roulette_game()
    
    if not game:
        print("Der er ingen aktiv roulette runde!")
        return
    
    if "result" in game:
        print("Rouletten er allerede drejet!")
        show_result(game)
        return
    
    if not game["bets"]:
        print("Ingen har satset noget! Spillet aflyses.")
        clear_roulette_game()
        return
    
    # Spin!
    winning_number = random.randint(0, 36)
    
    if winning_number == 0:
        color = "grÃ¸n"
    elif winning_number in RED_NUMBERS:
        color = "rÃ¸d"
    else:
        color = "sort"
    
    print(f"ðŸŽ° Rouletten drejer... og drejer... og...")
    print(f"ðŸŽ° Bolden lander pÃ¥: {winning_number} ({color})! ðŸŽ°")
    
    # Calculate winnings
    winners = []
    losers = []
    
    for user, bets in game["bets"].items():
        user_winnings = 0
        user_losses = 0
        
        for bet in bets:
            bet_amount = bet["amount"]
            payout = check_win(bet["type"], bet["value"], winning_number)
            
            if payout > 0:
                winnings = bet_amount * payout
                user_winnings += winnings
            else:
                user_losses += bet_amount
        
        if user_winnings > 0:
            # Pay out
            current_tokens = get_tokens(user)
            set_tokens(user, current_tokens + user_winnings)
            winners.append((user, user_winnings))
        
        if user_losses > 0 and user_winnings == 0:
            losers.append(user)
    
    # Announce results
    if winners:
        print("\nðŸŽ‰ VINDERE ðŸŽ‰")
        for user, winnings in winners:
            print(f"  {user} vinder {winnings} poletter!")
    
    if losers:
        print("\nðŸ˜¢ Bedre held nÃ¦ste gang:")
        for user in losers:
            print(f"  {user}")
    
    # Save result to game
    game["result"] = winning_number
    game["color"] = color
    set_roulette_game(game)
    
    print("\nStart en ny runde med 'casino roulette sats ...'")
    
    # Clear game after showing results
    clear_roulette_game()

def show_result(game):
    """Show results of a completed game."""
    winning_number = game["result"]
    color = game["color"]
    print(f"Sidste resultat: {winning_number} ({color})")

def show_status():
    """Show current game status."""
    game = get_roulette_game()
    
    if not game:
        print("Der er ingen aktiv roulette runde.")
        print("Start en ny med: casino roulette sats <belÃ¸b> <hvad>")
        return
    
    if "result" in game:
        show_result(game)
        return
    
    print("ðŸŽ° AKTIV ROULETTE RUNDE ðŸŽ°")
    
    if game["bets"]:
        print("\nIndsatser:")
        for user, bets in game["bets"].items():
            for bet in bets:
                bet_str = format_bet(bet["type"], bet["value"])
                print(f"  {user}: {bet['amount']} poletter pÃ¥ {bet_str}")
    else:
        print("Ingen har satset endnu!")
    
    spin_time = datetime.fromisoformat(game["spin_time"])
    if datetime.now() >= spin_time:
        print("\nTiden er udlÃ¸bet! Brug 'casino roulette spin' for at dreje.")
    else:
        time_left = (spin_time - datetime.now()).seconds
        print(f"\n{time_left} sekunder til rouletten drejes automatisk.")

def help_text():
    """Show roulette help."""
    print("""ðŸŽ° ROULETTE ðŸŽ°

Kommandoer:
  casino roulette sats <belÃ¸b> <hvad>  - Sats poletter
  casino roulette spin                 - Drej rouletten
  casino roulette status               - Se aktiv runde
  casino roulette hjÃ¦lp                - Vis denne hjÃ¦lp

Du kan satse pÃ¥:
  - Et specifikt nummer (0-36): 'casino roulette sats 10 17'
  - RÃ¸d eller sort: 'casino roulette sats 10 rÃ¸d'
  - Lige eller ulige: 'casino roulette sats 10 lige'
  - Lav (1-18) eller hÃ¸j (19-36): 'casino roulette sats 10 1-18'

Udbetalinger:
  - Enkelt nummer: 35:1
  - RÃ¸d/sort, lige/ulige, lav/hÃ¸j: 1:1""")

def main():
    user = get_user()
    if not user:
        print("Noget gik galt...")
        return
    
    # Handle both direct call and via casino command
    args = sys.argv[1:]
    
    # Skip "roulette" if called via "casino roulette"
    if args and args[0] == "roulette":
        args = args[1:]
    
    if not args or args[0] in ["hjÃ¦lp", "help"]:
        help_text()
    elif args[0] in ["sats", "bet"]:
        place_bet()
    elif args[0] in ["spin", "drej"]:
        spin_wheel()
    elif args[0] in ["status"]:
        show_status()
    else:
        help_text()

if __name__ == "__main__":
    main()
