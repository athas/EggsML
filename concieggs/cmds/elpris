#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import urllib.request
from datetime import datetime, timedelta
import json
import re
import sys

# Lortekoder
ENERGINET_SYSTEM = "41000"
ENERGINET_NET = "40000"
EL_AFGIFT = "EA-001"


def netselskab(addr):
    addr = urllib.parse.quote(addr)
    url = f"https://api.elnet.greenpowerdenmark.dk/api/supplierlookup/{addr}"
    res = json.load(urllib.request.urlopen(url))
    return (res["name"], res["def"])


def lokale_tariffer(postcode):

    (selskab, kode) = netselskab(postcode)

    filter = urllib.parse.quote_plus(
        json.dumps(
            {
                "Note": ["Nettarif C", "Nettarif C time"],
                "ChargeOwner": [selskab, f"{selskab} - {kode}"],
            }
        )
    )
    url = f"https://api.energidataservice.dk/dataset/DatahubPricelist?filter={filter}&sort=ValidFrom%20DESC&limit=1000"
    res = json.load(urllib.request.urlopen(url))
    return [to_profile(x) for x in res["records"]]


def zone(postcode):
    return "DK1" if int(postcode) >= 5000 else "DK2"


def tariffer():
    filter = urllib.parse.quote_plus(
        json.dumps(
            {
                "ChargeTypeCode": [
                    ENERGINET_NET,
                    ENERGINET_SYSTEM,
                    EL_AFGIFT,
                ]
            }
        )
    )
    url = f"https://api.energidataservice.dk/dataset/DatahubPricelist?filter={filter}&sort=ValidFrom%20DESC&limit=1000"
    res = json.load(urllib.request.urlopen(url))
    return [to_profile(x) for x in res["records"]]


def find_lokal_tarif(ts, dt):
    t = next(
        t
        for t in ts
        if t["valid_from"] <= dt and (t["valid_to"] is None or dt < t["valid_to"])
    )
    return t["profile"][dt.hour]


def find_tarif(ts, code, dt):
    t = next(
        t
        for t in ts
        if code == t["code"]
        and t["valid_from"] <= dt
        and (t["valid_to"] is None or dt < t["valid_to"])
    )
    return t["profile"][dt.hour]


def pris(lokale_ts, ts, spotpris, t):
    spotpris_med_moms = spotpris * 1.25 / 1000
    afgift = find_tarif(ts, EL_AFGIFT, t) * 1.25
    system = find_tarif(ts, ENERGINET_SYSTEM, t) * 1.25
    net = find_tarif(ts, ENERGINET_NET, t) * 1.25
    lokal = find_lokal_tarif(lokale_ts, t) * 1.25
    total_tarif = system + net + lokal

    return {
        "t": t,
        "total": afgift + total_tarif + spotpris_med_moms,
        "spot": spotpris_med_moms,
        "tariffer": total_tarif,
        "afgifter": afgift,
    }


def to_profile(record):
    default_price = record["Price1"]
    return {
        "code": record["ChargeTypeCode"],
        "valid_from": datetime.fromisoformat(record["ValidFrom"]),
        "valid_to": record["ValidTo"] and datetime.fromisoformat(record["ValidTo"]),
        "profile": [record.get(f"Price{i}") or default_price for i in range(1, 25)],
    }


def priser(bz, lokale_ts, ts, start, end):
    current_hour_string = start.strftime("%Y-%m-%dT%H:00")
    end_hour_string = end.strftime("%Y-%m-%dT%H:00")

    filter = urllib.parse.quote_plus(json.dumps({"PriceArea": [bz]}))
    url = f"https://api.energidataservice.dk/dataset/Elspotprices?start={current_hour_string}&end={end_hour_string}&filter={filter}&sort=HourUTC%20ASC"
    res = json.load(urllib.request.urlopen(url))
    return [
        pris(lokale_ts, ts, r["SpotPriceDKK"], datetime.fromisoformat(r["HourDK"]))
        for r in res["records"]
    ]


def elpris_detalje(addr, pris):
    total_pris = pris["total"]
    spot_pris = pris["spot"]
    tariffer = pris["tariffer"]
    afgifter = pris["afgifter"]

    return f"Elprisen ({addr}) er {total_pris:.2f} kr. inklusiv moms.  Heraf spotpris: {spot_pris:.2f} kr., tariffer: {tariffer:.2f} kr., elafgift: {afgifter:.2f} kr."


def elpris_linje(pris):
    tid = pris["t"].strftime("%H:00")
    total = pris["total"]
    return f"{tid}: {total:.2f} kr."


if __name__ == "__main__":
    addr = "Nørrebrogade 1, 2200"
    postcode = 2200
    if len(sys.argv) > 1:
        
        addr = " ".join(sys.argv[1:])
        match = re.fullmatch(".*(\\d{4}).*", addr)
        if not match:
            print("Ikke en gyldig adresse eller postnummer")
            sys.exit()
        postcode = match.group(1)

    current_time = datetime.now().astimezone()
    bz = zone(postcode)
    try:
        lokale_ts = lokale_tariffer(addr)
    except:
        print("Øh, der er vist noget galt med den adresse.")
        sys.exit()
    try:
        ts = tariffer()
    except:
        print("Kunne sgu' ikke lige finde tariffer...")
        sys.exit()
    try:
        ps = priser(bz, lokale_ts, ts, current_time, current_time + timedelta(hours=12))
    except:
        print("Nogle gange virker edb, andre gange ikke...")
        sys.exit()
    print(elpris_detalje(addr, ps[0]))
    print(', '.join(map(elpris_linje, ps[1:])))
