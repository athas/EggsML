#!/usr/bin/env perl
use 5.020;
use strict;
use warnings;

use Cwd;
use IO::All;
use File::Spec;
use Git::Repository qw(Blame Log);
use Time::Piece;
use IPC::System::Simple qw(capturex);
use List::UtilsBy qw(rev_nsort_by);

use Env qw(EGGS_USER EGGS_BODY CONCIEGGS_DIR CONCIEGGS_NAME);
use EggsML::EggsPI boolean => [qw(annoyedBy)],
                   list    => [qw(recentlyActive)],
                   text    => [qw(writtenIn findCommand)];

sub pick { $_[rand @_] }

sub og {
    my $last = pop;
    my $first = join ", ", @_;
    return "$first og $last";
}

sub extract_coauthors {
    my ($commit_message) = @_;
    my @coauthors;
    
    # Extract Co-Authored-By trailers from commit message
    while ($commit_message =~ /^Co-Authored-By:\s*(.+?)\s*</mg) {
        my $coauthor = $1;
        # Extract name from "Name <email>" or just "Name"
        if ($coauthor =~ /^(.+?)\s*<.*>$/) {
            push @coauthors, $1;
        } else {
            push @coauthors, $coauthor;
        }
    }
    
    return @coauthors;
}

my $arg = shift @ARGV;
if (!$arg) {
    say "Brug: ansvar <fil | /regex/i | person>";
    exit;
}

my @victims = recentlyActive;
my $repo = Git::Repository->new;

if (my ($regex, $i) = $EGGS_BODY =~ qr{/(.*)/(i?)$}) {
    ansvar_enkelt_linje($regex, $i);
    exit;
}

if ($arg eq $CONCIEGGS_NAME) {
    say "$EGGS_USER: Nøj, hvor er du sjov!";
    annoyedBy($EGGS_USER, 1, "spurgte hvem der har ansvar for mig");
    exit;
}

if (grep { $arg eq $_ } @victims) {
    say pick(
        "$EGGS_USER: Det må du spørge ${arg}s mor om!",
        "$EGGS_USER: Så gerne.  Du har hermed fået ansvaret for $arg!",
        "$EGGS_USER: Jeg tror desværre at $arg er uden for pædagogisk rækkevidde.",
    );
    exit;
}

ansvar_kommando();
exit;

sub ansvar_enkelt_linje {
    my $regex = shift;
    my $i = shift;

    # Eftersom OpenBSD's egrep ikke understøtter --exclude-dir=...
    # og der er så meget besvær med at benytte ack, søger vi i de
    # mest interessante mapper:
    my @subdirs = qw(cmds compiled eggspi filters hooks ops virker-egge);
    chomp (my @matches = capturex('egrep', "-IRn$i", '--', $regex, @subdirs));
    if (!@matches) {
        my $victim = pick(@victims);
        say "$EGGS_USER: Den stump kode har jeg svært ved at finde, " .
            "men det er nok ${victim}s skyld hvis det ikke virker!";
        exit;
    }

    my %authors;
    my @line_answers;
    for my $match (@matches) {
        my ($match_filename, $match_line, $match_text) = split /:/, $match, 3;
        my $git_match_filename = File::Spec->catfile($CONCIEGGS_DIR, $match_filename);
        my $blame = $repo->blame($git_match_filename, ignore_whitespace => 0);
        my $author = $blame->[$match_line - 1]->{commit_attributes}->{author};
        $authors{$author}++;

        $match_text =~ s/^\s*//;
        $match_text =~ s/\s*$//;
        push @line_answers, "Linje $match_line i $match_filename er skrevet af $author: $match_text";
    }

    my $n = @matches;
    if ($n > 6) {
        my @top_authors = rev_nsort_by { $authors{$_} } keys %authors;
        my @top_line = map { sprintf('%s (%s)', $_, $authors{$_}) } @top_authors;
        say "$EGGS_USER: Den stump kode forekommer godt nok mange gange ($n),"
            . " mestendels begået af: " . join(', ', @top_line);
        exit;
    } else {
        say $_ for @line_answers;
    }

    exit;
}

sub ansvar_kommando {
    my $cwd_filename = $arg =~ qr{/} ? $arg : findCommand($arg);

    my $git_filename =
        $cwd_filename =~ qr{^/}
            ? $cwd_filename
            : File::Spec->catfile($CONCIEGGS_DIR, $cwd_filename);

    unless (($git_filename // '') =~ /^\Q$CONCIEGGS_DIR\E/) {
        say "$EGGS_USER: Glem det.";
        annoyedBy($EGGS_USER, 10, "bad mig om at finde ansvar udenfor concieggs-mappen");
        exit;
    }

    if (! -f $cwd_filename) {
        my $victim = pick(@victims);
        say "$EGGS_USER: Jeg er ikke bekendt med noget $arg-programmel." .
            "  Måske du skulle bede $victim om at lave det?";
        exit;
    }

    my @lines = io($cwd_filename)->slurp;
    my $lang = writtenIn($cwd_filename);

    my $log = [ $repo->log(qw(--follow), $git_filename) ];
    my $blame = $repo->blame($git_filename, ignore_whitespace => 0);

    my $n_commits = @$log;
    my $creator = $log->[-1]->{author_name};
    my $created = $log->[-1]->{author_gmtime};
    my $created_commit_id = $log->[-1]->{commit};

    my %authors;
    my %commits;
    my %coauthors; # Track co-authors from commit trailers
    my $total_lines = 0;

    my $oldest_commit = $blame->[0]->{commit_attributes};
    my $newest_commit = $oldest_commit;

    my $i = 0;
    for my $line (@$blame) {
        # Pretend whitespace lines don't exist.
        next if $lines[$i++] =~ /^\s*$/;

        my $commit_id = $line->{commit_id};
        $commits{$commit_id}++;

        my $commit = $line->{commit_attributes};
        my $author = $commit->{author};
        $authors{$author}++;
        $total_lines++;

        # Extract co-authors from commit message if available
        if (!$commits{$commit_id . "_processed"}) {
            # Get full commit message including body using git command
            my $commit_message = capturex('git', 'log', '--format=%B', '-1', $commit_id);
            my @commit_coauthors = extract_coauthors($commit_message);
            for my $coauthor (@commit_coauthors) {
                $coauthors{$coauthor}++;
                $authors{$coauthor}++; # Include in main author count
            }
            $commits{$commit_id . "_processed"} = 1; # Mark as processed to avoid duplicates
        }

        $oldest_commit = $commit if $commit->{'author-time'} < $oldest_commit->{'author-time'};
        $newest_commit = $commit if $commit->{'author-time'} > $newest_commit->{'author-time'};
    }

    my $created_commit_time = localtime($created)->strftime('%Y-%m-%d %H:%M');
    my $oldest_commit_time = localtime($oldest_commit->{'author-time'})->strftime('%Y-%m-%d %H:%M');
    my $newest_commit_time = localtime($newest_commit->{'author-time'})->strftime('%Y-%m-%d %H:%M');
    my $newest_commit_summary = (split /\n/, $newest_commit->{summary})[0];

    my $output = "Filen blev skabt af $creator $created_commit_time";

    # Solo-projekt
    if (keys %authors == 1) {
        my $author = (keys %authors)[0];
        if ($creator ne $author) {
            $output .= ", sidenhen omskrevet af $author i $lang,";
        } else {
            $output .= ", er kodet i $lang,";
        }

        $output .= sprintf(" og de%s %d linje%s kode er ",
                           $total_lines == 1 ? 'n' : '',
                           $total_lines,
                           $total_lines == 1 ? '' : 'r');

        if ($n_commits == 1) {
            $output .= sprintf("en originaludgivelse.");
        } else {
            $output .= sprintf("udført over en serie af %d commits.", $n_commits);
        }

        if ($n_commits > 1) {
            $output .= sprintf("  Den seneste ændring blev indført %s med beskeden: %s",
                               $newest_commit_time,
                               $newest_commit_summary);
        }
        
        # Add co-author information if any co-authors exist
        if (keys %coauthors) {
            my $coauthor_list = og(keys %coauthors);
            $output .= "  Medforfattere inkluderer: $coauthor_list.";
        }

    # Samarbejde
    } else {
        my $authors =
            og(map { sprintf("%s (%.2f%%, %d linje%s)",
                             $_,
                             ($authors{$_} / $total_lines * 100),
                             $authors{$_},
                             $authors{$_} == 1 ? '' : 'r');
                   } keys %authors);

        if ($commits{$created_commit_id}) {
            $output .= sprintf(" og indeholder stadig %d linje%s original $lang-kode.",
                               $commits{$created_commit_id},
                               $commits{$created_commit_id} == 1 ? '' : 'r');
        } elsif ($lang) {
            $output .= ", men er sidenhen blevet omskrevet i $lang.";
        } else {
            $output .= ", men indeholder ikke længere original kode.";
        }

        $output .= "  Den indeholder ændringer af $authors via $n_commits commits.";
        
        # Add co-author information if any co-authors exist
        if (keys %coauthors) {
            my $coauthor_list = og(keys %coauthors);
            $output .= "  Medforfattere inkluderer: $coauthor_list.";
        }
        
        $output .= sprintf("  Den seneste ændring blev indført af %s %s med beskeden: %s",
                           $newest_commit->{author},
                           $newest_commit_time,
                           $newest_commit_summary);
    }

    say $output;
}
